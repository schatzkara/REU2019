import torch
import torch.nn as nn
import torch.nn.functional as f

device = 'cuda' if torch.cuda.is_available() else 'cpu'


class KPPredictor(nn.Module):
    """
    Class representing the Keypoint Predictor to be used.
    """

    def __init__(self, in_channels, nkp=32, stdev=0.1, kpp_name='Keypoint Predictor'):
        """
        Initializes the Generator network.
        :param in_channels: (int) The number of channels in the input tensor
        :param nkp: (int, optional) The number of keypoints to predict; the number of Gaussian heatmaps to generate per
                     frame. (default 32)
        :param stdev: (float, optional) The standard deviation to be used to generate the Gaussian heatmaps
                      (default 0.1).
        :param kpp_name: (str, optional) The name of the network (default 'Keypoint Predictor').
        """
        super(KPPredictor, self).__init__()
        self.kpp_name = kpp_name

        self.stdev = stdev
        self.nkp = nkp

        # definition of all layer channels
        layer_out_channels = {1: 128,
                              2: 128,
                              3: 128,
                              4: self.nkp}
        layer_in_channels = {1: in_channels,
                             2: layer_out_channels[1] + in_channels,
                             3: layer_out_channels[2] + in_channels,
                             4: layer_out_channels[3]}

        # definition of all network layers
        layer = 1
        self.conv3d_1 = nn.Conv3d(in_channels=layer_in_channels[layer], out_channels=layer_out_channels[layer],
                                  kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.relu1 = nn.ReLU(inplace=True)
        layer = 2
        self.conv3d_2 = nn.Conv3d(in_channels=layer_in_channels[layer], out_channels=layer_out_channels[layer],
                                  kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.relu2 = nn.ReLU(inplace=True)
        layer = 3
        self.conv3d_3 = nn.Conv3d(in_channels=layer_in_channels[layer], out_channels=layer_out_channels[layer],
                                  kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.relu3 = nn.ReLU(inplace=True)
        layer = 4
        self.conv3d_4 = nn.Conv3d(in_channels=layer_in_channels[layer], out_channels=layer_out_channels[layer],
                                  kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
        self.sigmoid = nn.Sigmoid()

        # print('%s Model Successfully Built \n' % self.kpp_name)

    def forward(self, reps):
        """
        Function to compute a single forward pass through the network, according to the architecture.
        :param reps: (tensor) The input tensors from which to predict key-points. Includes skip connections.
                   Must be a tensor of shape: (bsz, 32, 16, 14, 14) for this application.
        :return: A tensor representing the video generated by the network.
                 Shape of output is: (bsz, 3, 8/16, 112, 112) for this application.
        """
        reps_to_return = []
        # block 1
        block = 1
        rep_block_input = reps[-block]
        x = self.conv3d_1(rep_block_input)
        x = self.relu1(x)
        reps_to_return.append(x)
        x = f.interpolate(x, size=(8, 28, 28), mode='trilinear')

        # block2
        block = 2
        rep_block_input = reps[-block]
        x = torch.cat([x, rep_block_input], dim=1)  # dim=channels
        x = self.conv3d_2(x)
        x = self.relu2(x)
        reps_to_return.append(x)
        x = f.interpolate(x, size=(8, 56, 56), mode='trilinear')

        # block 3
        block = 3
        rep_block_input = reps[-block]
        x = torch.cat([x, rep_block_input], dim=1)  # dim=channels
        x = self.conv3d_3(x)
        x = self.relu3(x)
        reps_to_return.append(x)
        x = f.interpolate(x, size=(16, 56, 56), mode='trilinear')

        # block 4
        x = self.conv3d_4(x)
        x = self.sigmoid(x)

        reps_to_return.reverse()

        bsz, nkp, frames, height, width = x.size()

        gauss_mean = KPPredictor.get_gauss_mean(x)
        gauss_heatmaps = KPPredictor.get_gaussian_heatmaps(mean=gauss_mean, stdev=self.stdev, map_size=(height, width))

        return reps_to_return, gauss_heatmaps, gauss_mean  # bsz,32,16,56,56

    @staticmethod
    def get_gauss_mean(x):
        bsz, nkp, frames, height, width = x.size()
        y_coord = KPPredictor.get_coord(x, other_axis=4, axis_size=height)  # bsz, nkp, frames
        x_coord = KPPredictor.get_coord(x, other_axis=3, axis_size=width)  # bsz, nkp, frames
        y_coord, x_coord = torch.unsqueeze(y_coord, dim=3), torch.unsqueeze(x_coord, dim=3)

        gauss_mean = torch.cat([y_coord, x_coord], dim=3)

        return gauss_mean

    @staticmethod
    def get_coord(tensor, other_axis, axis_size):
        coord_probs = torch.mean(tensor, dim=other_axis, keepdim=False)  # bsz, nkp, frames, h/w
        coord_probs = nn.Softmax(dim=3)(coord_probs)  # dim=h/w; softmax along h/w

        coords = torch.linspace(start=-1.0, end=1.0, steps=axis_size, dtype=torch.float32)  # h/w
        coords = torch.reshape(coords, shape=(1, 1, 1, axis_size))  # bsz=1, nkp=1, frames=1, h/w
        coords = coords.to(device)

        coord = torch.sum(coord_probs * coords, dim=3)  # dim=h/w; bsz, nkp, frames

        return coord

    @staticmethod
    def get_gaussian_heatmaps(mean, stdev, map_size):
        height, width = map_size
        mean_y, mean_x = mean[:, :, :, 0:1], mean[:, :, :, 1:2]  # bsz, nkp, frames, h/w=1

        y = torch.linspace(start=-1.0, end=1.0, steps=height, dtype=torch.float32)  # h
        x = torch.linspace(start=-1.0, end=1.0, steps=width, dtype=torch.float32)  # w
        y = torch.reshape(y, shape=(1, 1, 1, height))  # bsz=1, nkp=1, frames=1, h
        x = torch.reshape(x, shape=(1, 1, 1, width))  # bsz=1, nkp=1, frames=1, w
        y, x = y.to(device), x.to(device)

        gauss_y = torch.exp(-(((y - mean_y) * (y - mean_y)) / (2 * stdev * stdev)))  # bsz, nkp, frames, h
        gauss_x = torch.exp(-(((x - mean_x) * (x - mean_x)) / (2 * stdev * stdev)))  # bsz, nkp, frames, w
        gauss_y = torch.unsqueeze(gauss_y, dim=4)  # bsz, nkp, frames, h, w=1
        gauss_x = torch.unsqueeze(gauss_x, dim=3)  # bsz, nkp, frames, h=1, w

        gauss_map = torch.matmul(gauss_y, gauss_x)  # bsz, nkp, frames, h, w

        return gauss_map

# if __name__ == "__main__":
#     print_summary = True
#
#     kpp = KPPredictor()
#
#     if print_summary:
#         summary(kpp, input_size=(1, 16, 14, 14))
